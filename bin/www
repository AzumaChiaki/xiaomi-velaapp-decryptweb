import express from 'express';
import path from 'path';
import axios from 'axios';
import cors from 'cors';
import fs from 'fs';
import qrcode from 'qrcode';
import { exec } from 'child_process';
import chalk from 'chalk';
import { fileURLToPath } from 'url';
import { dirname } from 'path';
import { getUnlockPwd } from './decrypt.js'; // 使用相对路径

const app = express();
const port = 80;

app.use(cors({ origin: '*', methods: ['GET', 'POST'] }));
const publicDir = path.resolve('/www/wwwroot/public');
app.use(express.static(publicDir));

app.use(express.json());  // 用于解析 POST 请求中的 JSON 数据

const cookieFilePath = path.join(publicDir, 'cookies.txt');

// 获取当前时间
function getTime() {
  const now = new Date();
  return `${now.toISOString().split('T')[1].split('.')[0]}`;  // 返回格式化时间
}

// 生成二维码接口
app.get('/api/qrcode/generate', async (req, res) => {
  console.log(chalk.cyan(`[${getTime()}] QR code request received`));
  try {
    console.log(chalk.yellow(`[${getTime()}] Generating QR code...`));
    const response = await axios.get('https://passport.bilibili.com/x/passport-login/web/qrcode/generate');
    
    console.log(chalk.green(`[${getTime()}] API Response:`, response.data));

    if (!response.data || response.data.code !== 0) {
      throw new Error('Invalid response from Bilibili API');
    }

    const { url, qrcode_key } = response.data.data;
    console.log(chalk.green(`[${getTime()}] QR Code URL:`, url));
    console.log(chalk.green(`[${getTime()}] QR Code Key:`, qrcode_key));

    const qrImageUrl = await qrcode.toDataURL(url); // 生成二维码的 base64 数据URL
    console.log(chalk.green(`[${getTime()}] Generated QR Code Image URL`));

    res.json({
      code: 0,
      message: 'QR code generated successfully',
      data: { qrImageUrl, qrcode_key },
    });

    // 开始轮询二维码扫描状态
    console.log(chalk.cyan(`[${getTime()}] Polling QR code status for key: ${qrcode_key}`));
    pollQRCodeStatus(qrcode_key);
  } catch (error) {
    console.error(chalk.red(`[${getTime()}] Error generating QR code:`, error.message));
    res.status(500).json({ code: -1, message: 'Failed to generate QR code' });
  }
});

// 解密接口
app.post('/api/decrypt', async (req, res) => {
  console.log(chalk.cyan(`[${getTime()}] Decrypt request received`));
  const { deviceCode, watchId } = req.body;
  console.log(chalk.yellow(`[${getTime()}] Device code: ${deviceCode}, Watch ID: ${watchId}`));

  if (!deviceCode || !watchId) {
    console.warn(chalk.yellow(`[${getTime()}] Invalid request: Missing deviceCode or watchId`));
    return res.status(400).json({ code: -1, message: '设备码和表盘ID不能为空' });
  }

  try {
    const unlockPwd = getUnlockPwd(deviceCode, watchId);
    console.log(chalk.green(`[${getTime()}] Decrypted password: ${unlockPwd}`));  // 输出解密后的密码

    if (!unlockPwd) {
      return res.status(500).json({ code: -1, message: '解密结果为空' });
    }

    res.json({ code: 0, message: '解密成功', data: { unlockPwd } });
  } catch (error) {
    console.error(chalk.red(`[${getTime()}] Error during decryption process:`, error));
    res.status(500).json({ code: -1, message: '解密失败' });
  }
});


// 轮询二维码状态
async function pollQRCodeStatus(qrcode_key) {
  console.log(chalk.cyan(`[${getTime()}] Start polling QR code status for key: ${qrcode_key}`));
  try {
    // 发起轮询请求
    const response = await axios.get('https://passport.bilibili.com/x/passport-login/web/qrcode/poll', {
      params: { qrcode_key },
      withCredentials: true,  // 确保携带 cookies
    });

    console.log(chalk.green(`[${getTime()}] Poll response:`, response.data));

    const { code, message, data } = response.data;
    console.log(chalk.green(`[${getTime()}] Polling result: code=${code}, message=${message}`));

    // 处理不同的登录状态
    if (code === 0) {
      console.log(chalk.green(`[${getTime()}] QR code scanned, login successful`));

      // 登录成功后保存 Cookie
      const cookies = response.headers['set-cookie'];
      if (cookies) {
        console.log(chalk.green(`[${getTime()}] Cookies received`));
        fs.writeFileSync(cookieFilePath, cookies.join('\n'), 'utf-8');
        console.log(chalk.green(`[${getTime()}] Cookies saved to: ${cookieFilePath}`));
      }
    } else if (code === 86038 || code === 86101) {
      // 如果二维码尚未扫描，继续轮询
      console.log(chalk.yellow(`[${getTime()}] QR code not yet scanned`));
    } else if (code === 86090) {
      // 如果二维码过期，停止轮询
      console.log(chalk.red(`[${getTime()}] QR code expired`));
      return;  // 结束递归
    } else {
      // 其他错误情况
      console.error(chalk.red(`[${getTime()}] Unknown status code:`, response.data));
      return;  // 结束递归
    }

    // 每隔 2 秒继续轮询
    console.log(chalk.cyan(`[${getTime()}] Waiting 2 seconds before next poll...`));
    setTimeout(() => {
      pollQRCodeStatus(qrcode_key);  // 递归调用，继续轮询
    }, 2000);

  } catch (error) {
    console.error(chalk.red(`[${getTime()}] Error polling QR code status:`, error.message));
  }
}

app.listen(port, () => {
  console.log(chalk.green(`[${getTime()}] Server running on http://localhost:${port}`));
});
